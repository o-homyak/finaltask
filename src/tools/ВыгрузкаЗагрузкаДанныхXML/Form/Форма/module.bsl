// структура соотвествия имени класса индексу его картинки в коллекции
Перем ИндексыКартинокКлассов;
Перем СоответствиеПоказыватьПриНеобходимости;

Перем РежимВыгрузки;
Перем ПолужирныйШрифт;

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Обработчик события ПередОткрытием формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	РежимВыгрузки = Истина;
	
КонецПроцедуры

Процедура ВосстановитьСписокЗначенийДляЭлементаФормы(ИмяПараметраДляСохранения = "", СписокЭлементаВизуализации)

	Если НЕ ЗначениеЗаполнено(ИмяПараметраДляСохранения) Тогда
		Возврат;
	КонецЕсли;
	
	СписокЭлементаВизуализации.Очистить();
	
	ВосстановленноеЗначение = ВосстановитьЗначение(ИмяПараметраДляСохранения);
	Если ТипЗнч(ВосстановленноеЗначение) = Тип("СписокЗначений") Тогда
		СписокЗначений = ВосстановленноеЗначение;
		СписокЭлементаВизуализации = СписокЗначений.Скопировать();
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события ПриОткрытии формы.
//
Процедура ПриОткрытии()
	
	ВосстановитьСписокЗначенийДляЭлементаФормы("Обработки.ВыгрузкаЗагрузкаДанныхXML.ПолеИмениФайла", ЭлементыФормы.ПолеИмениФайла.СписокВыбора);
	ВосстановитьСписокЗначенийДляЭлементаФормы("Обработки.ВыгрузкаЗагрузкаДанныхXML.ПолеИмениФайла2", ЭлементыФормы.ПолеИмениФайла2.СписокВыбора);
	
	Если ДеревоМетаданных.Строки.Количество() = 0 Тогда
	
		Инициализация();
		
	КонецЕсли;
	
	ДействияПриИзмененииРежимаВыгрузки();
	
    ИспользоватьФорматFastInfoSetПриИзменении(Неопределено);	
	
	ДеревоМетаданных_КопияФормы = ДеревоМетаданных;	
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Обработчик события НачалоВыбора элемента формы ПолеИмениФайла.
//
Процедура ПолеИмениФайлаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РежимДиалога = ?(РежимВыгрузки, РежимДиалогаВыбораФайла.Сохранение, РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалога);
	Если Не РежимВыгрузки Тогда
		ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	КонецЕсли;
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;
	ДиалогВыбораФайла.Заголовок = "Задайте имя файла выгрузки";
	ДиалогВыбораФайла.ПолноеИмяФайла = ПолеИмениФайла;
	
	ДиалогВыбораФайла.Фильтр = "Формат выгрузки(*.xml)|*.xml|FastInfoSet (*.fi)|*.fi|Все файлы (*.*)|*.*";
	Если ДиалогВыбораФайла.Выбрать() Тогда
		ПолеИмениФайла = ДиалогВыбораФайла.ПолноеИмяФайла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьСтрокуКСпискуВыбора(СписокСохраняемыхЗначений, ЗначениеСохранения, ИмяПараметраДляСохранения)
	
	Если ПустаяСтрока(ЗначениеСохранения) Тогда
		Возврат;
    КонецЕсли;
	
	НайденныйЭлемент = СписокСохраняемыхЗначений.НайтиПоЗначению(ЗначениеСохранения);
	Если НайденныйЭлемент <> Неопределено Тогда
		СписокСохраняемыхЗначений.Удалить(НайденныйЭлемент);
	КонецЕсли;
	
	СписокСохраняемыхЗначений.Вставить(0, ЗначениеСохранения);
	
	Пока СписокСохраняемыхЗначений.Количество() > 10 Цикл
		СписокСохраняемыхЗначений.Удалить(СписокСохраняемыхЗначений.Количество() - 1);
	КонецЦикла;
	
	Если (ЗначениеЗаполнено(ИмяПараметраДляСохранения)) И ТипЗнч(ИмяПараметраДляСохранения) = Тип("Строка") Тогда
		СохранитьЗначение(ИмяПараметраДляСохранения, СписокСохраняемыхЗначений.Скопировать());
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события Нажатие элемента формы КнопкаВыполнить.
//
Процедура КнопкаВыполнитьНажатие(Элемент)
	
	ОбработанныхКонстант = 0;
	ОбработанныхНаборовЗаписей = 0;
	
	Если РежимВыгрузки Тогда
		
		ДобавитьСтрокуКСпискуВыбора(ЭлементыФормы.ПолеИмениФайла.СписокВыбора, СокрЛП(ПолеИмениФайла), "Обработки.ВыгрузкаЗагрузкаДанныхXML.ПолеИмениФайла");
		ВыполнитьВыгрузку(СокрЛП(ПолеИмениФайла), ЛОЖЬ);
		
	Иначе
		
		ДобавитьСтрокуКСпискуВыбора(ЭлементыФормы.ПолеИмениФайла2.СписокВыбора, ПолеИмениФайла, "Обработки.ВыгрузкаЗагрузкаДанныхXML.ПолеИмениФайла2");
		ВыполнитьЗагрузку(ПолеИмениФайла);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента формы ДеревоМетаданных.
//
Процедура ДеревоМетаданныхПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ОформлениеСтроки.Ячейки.ВыгружатьПриНеобходимости.ОтображатьФлажок = ПоказыватьФлажокВыгружатьПриНеобходимости(ДанныеСтроки);
	ИндексКартинки = Неопределено;
	
	Если ДанныеСтроки.ЭлементОписания <> Неопределено Тогда
		ИндексКартинки = ИндексыКартинокКлассов[ДанныеСтроки.ЭлементОписания.Класс];
	Иначе
		ИндексКартинки = ИндексыКартинокКлассов[ДанныеСтроки.Метаданные];
	КонецЕсли;
	
	Если ИндексКартинки <> Неопределено Тогда
		
		ОформлениеСтроки.Ячейки.Метаданные.ИндексКартинки = ИндексКартинки;
		ОформлениеСтроки.Ячейки.Метаданные.ОтображатьКартинку = Истина;	
		
	КонецЕсли;
	
	Если ДанныеСтроки.Использоватьотбор = Истина Тогда
		
		ОформлениеСтроки.Шрифт = ПолужирныйШрифт;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПриИзмененииФлажка элемента формы ДеревоМетаданных.
//
Процедура ДеревоМетаданныхПриИзмененииФлажка(Элемент, Колонка)
	Если Колонка = ЭлементыФормы.ДеревоМетаданных.Колонки.Метаданные Тогда
		ОбработкаИзмененияСостоянияВыгружать(Элемент.ТекущиеДанные);
	ИначеЕсли Колонка = ЭлементыФормы.ДеревоМетаданных.Колонки.ВыгружатьПриНеобходимости Тогда
		ОбработкаИзмененияСостоянияВыгружатьПриНеобходимости(Элемент.ТекущиеДанные);
	КонецЕсли;
КонецПроцедуры

// Обработчик события кнопки ПересчетВыгружаемыхПоСсылке командной панели КоманднаяПанель1.
//
Процедура КоманднаяПанель1ПересчетВыгружаемыхПоСсылке(Кнопка)
	
	СоставВыгрузки();
	ПересчитатьВыгружаемыеПоСсылке(СоставПолнойВыгрузки);	
	
КонецПроцедуры

Процедура ПостроительОтборПослеУдаления(Элемент)
	
	ОбновитьНастройкиПостроителяВТаблицеДляВыгрузки();
	
КонецПроцедуры

Процедура ПостроительОтборПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ОбновитьНастройкиПостроителяВТаблицеДляВыгрузки();
	
КонецПроцедуры

Процедура КоманднаяПанельПостроительОтборПоказатьРезультатаОтбора(Кнопка)
	
	// показать выбранные записи
	Если ЭлементыФормы.ПостроительОтбор.Доступность <> Истина
		ИЛИ ЭлементыФормы.ДеревоМетаданных.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВременнныйПостроитель = ПодготовитьПостроительДляВыгрузки(ЭлементыФормы.ДеревоМетаданных.ТекущиеДанные);
	ВременнныйПостроитель.Вывести();
	
КонецПроцедуры

Процедура ОсновныеДействияФормыВыполнитьПроверкуНаНаличиеНедопустимыхСимволов(Кнопка)
	
	ОбработанныхКонстант = 0;
	ОбработанныхНаборовЗаписей = 0;
	
	Если РежимВыгрузки Тогда
		
		ДобавитьСтрокуКСпискуВыбора(ЭлементыФормы.ПолеИмениФайла.СписокВыбора, СокрЛП(ПолеИмениФайла), "Обработки.ВыгрузкаЗагрузкаДанныхXML.ПолеИмениФайла");
		ВыполнитьВыгрузку(СокрЛП(ПолеИмениФайла), Истина);		
				
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолеИмениФайла2Открытие(Элемент, СтандартнаяОбработка)
	
	ЗапуститьПриложение("explorer " + Элемент.Значение);
	СтандартнаяОбработка = ЛОЖЬ;
	
КонецПроцедуры

Процедура ПолеИмениФайлаОткрытие(Элемент, СтандартнаяОбработка)
	
	ЗапуститьПриложение("explorer " + Элемент.Значение);
	СтандартнаяОбработка = ЛОЖЬ;	
	
КонецПроцедуры

Процедура ДеревоМетаданныхПриАктивизацииСтроки(Элемент)
	
	НастроитьПостроитель();
	
КонецПроцедуры

Процедура ПанельРежимаПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	РежимВыгрузки = (ЭлементыФормы.ПанельРежима.ТекущаяСтраница = ЭлементыФормы.ПанельРежима.Страницы.Выгрузка);
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ВыполнитьПроверкуНаНаличиеНедопустимыхСимволов.Доступность = РежимВыгрузки;
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Разделитель2.Доступность = РежимВыгрузки;
	
	ДействияПриИзмененииРежимаВыгрузки(Ложь);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Функция определяет, следует ли показывать флажок в колонке выгрузки по ссылке
//
// Параметры
//
Функция ПоказыватьФлажокВыгружатьПриНеобходимости(ЭлементДЗ)
	
	ЗапомненноеСостояние = СоответствиеПоказыватьПриНеобходимости[ЭлементДЗ];
	Если ЗапомненноеСостояние <> Неопределено Тогда 
		Возврат ЗапомненноеСостояние;
	КонецЕсли;
	Если ОбъектОбразуетСсылочныйТип(ЭлементДЗ.ОбъектМД) Тогда
		СоответствиеПоказыватьПриНеобходимости[ЭлементДЗ] = Истина;
		Возврат Истина;
	КонецЕсли;
	Для Каждого ПодчиненныйЭлементДЗ Из ЭлементДЗ.Строки Цикл
		Если ПоказыватьФлажокВыгружатьПриНеобходимости(ПодчиненныйЭлементДЗ) Тогда
			СоответствиеПоказыватьПриНеобходимости[ЭлементДЗ] = Истина;
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	СоответствиеПоказыватьПриНеобходимости[ЭлементДЗ] = Ложь;
	Возврат Ложь;
	
КонецФункции

Процедура ДействияПриИзмененииРежимаВыгрузки(ИзменятьСтраницу = Истина)
	
	Если РежимВыгрузки <> Истина Тогда
		
		Если ИзменятьСтраницу Тогда
			ЭлементыФормы.ПанельРежима.ТекущаяСтраница = ЭлементыФормы.ПанельРежима.Страницы.Загрузка;
		КонецЕсли;
		
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Выполнить.Текст = "Загрузить данные";
		
	Иначе
		
		Если ИзменятьСтраницу Тогда
			ЭлементыФормы.ПанельРежима.ТекущаяСтраница = ЭлементыФормы.ПанельРежима.Страницы.Выгрузка;
		КонецЕсли;
		
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Выполнить.Текст = "Выгрузить данные";
		
	КонецЕсли;
	
КонецПроцедуры

Функция ОпределитьПоСтрокеДереваДоступенПостроитель(СтрокаДерева)
	
	Если СтрокаДерева.Строки.Количество() > 0 Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Процедура УдалитьОтборыПостроителяОтчета(Построитель)
	
	ОтборКоличество = Построитель.Отбор.Количество();
	Для Н = 1 По ОтборКоличество Цикл
		Построитель.Отбор.Удалить(0);
	КонецЦикла;	
	
КонецПроцедуры

// Служит для настройки построителя при отборе данных
//
// Параметры:
//
Процедура НастроитьПостроитель()

	ТекущаяСтрока = ЭлементыФормы.ДеревоМетаданных.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ОпределитьПоСтрокеДереваДоступенПостроитель(ТекущаяСтрока) Тогда
		 
		ДоступностьПостроителя = ЛОЖЬ;
		УдалитьОтборыПостроителяОтчета(Построитель);
				
	Иначе
		
		Попытка
			
			Построитель = ПодготовитьПостроительДляВыгрузки(ТекущаяСтрока);
						
			ДоступностьПостроителя = Истина;
			
		Исключение
			ДоступностьПостроителя = ЛОЖЬ;
			УдалитьОтборыПостроителяОтчета(Построитель);	
		КонецПопытки;		
			
	КонецЕсли;
	
	ЭлементыФормы.ПостроительОтбор.Доступность = ДоступностьПостроителя;
	ЭлементыФормы.КоманднаяПанельПостроительОтбор.Доступность = ДоступностьПостроителя;

КонецПроцедуры

Процедура ОбновитьНастройкиПостроителяВТаблицеДляВыгрузки()
	
	ТекущаяСтрока = ЭлементыФормы.ДеревоМетаданных.ТекущиеДанные;
	Если Построитель.Отбор.Количество() > 0 Тогда
		
		ТекущаяСтрока.НастройкиПостроителя = Построитель.ПолучитьНастройки();
		ТекущаяСтрока.ИспользоватьОтбор    = ИСТИНА;
		
	Иначе
		
		ТекущаяСтрока.НастройкиПостроителя = Неопределено;
		ТекущаяСтрока.ИспользоватьОтбор    = ЛОЖЬ;
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура КнопкаУстановкиПериодаНажатие(Элемент)
	
	НП = Новый НастройкаПериода;
	НП.ВариантНастройки = ВариантНастройкиПериода.Период;
	
	Если НП.Редактировать() Тогда
		
		ДатаНачала = НП.ПолучитьДатуНачала();
		ДатаОкончания = НП.ПолучитьДатуОкончания();

	КонецЕсли;
	
КонецПроцедуры

Процедура ОсновныеДействияФормыВыполнитьПроверкуНаНаличиеНедопустимыхСимволовДляПланаОбмена(Кнопка)
	
	// выбирается узел плана обмена
	СсылкаНаУзел = Неопределено;
	
	Массив = Новый Массив;
	
	Для Каждого Метаданное Из Метаданные.ПланыОбмена Цикл
	    Массив.Добавить(Тип("ПланОбменаСсылка." + Метаданное.Имя));
	КонецЦикла;
	
	Если Массив.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеТипов = Новый ОписаниеТипов(Массив);
	
	ВвестиЗначение(СсылкаНаУзел, "Укажите узел обмена", ОписаниеТипов);
	
	Если Не ЗначениеЗаполнено(СсылкаНаУзел) Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьПроверкуДляВыгрузкиОбъектовИзПланаОбмена(СсылкаНаУзел);
	
КонецПроцедуры

Процедура ИспользоватьФорматFastInfoSetПриИзменении(Элемент)
	
	Если ИспользоватьФорматFastInfoSet Тогда
		ПолеИмениФайла = СтрЗаменить(ПолеИмениФайла, ".xml", ".fi");
	Иначе
		ПолеИмениФайла = СтрЗаменить(ПолеИмениФайла, ".fi", ".xml");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередСохранениемЗначений(Отказ)
	
	ДеревоСохранения = ДеревоМетаданных_КопияФормы.Скопировать();
	СохраненныеНастройки = Новый ХранилищеЗначения(ДеревоСохранения);
	
КонецПроцедуры

Процедура ВосстановитьФлажкиДерева(ДеревоПриемник, ДеревоИсточник)
	
	Попытка
	
		Для Каждого СтрокаДереваПриемника Из ДеревоПриемник.Строки Цикл
			
			СтрокаИсточника = ДеревоИсточник.Строки.Найти(СтрокаДереваПриемника.ПолноеИмяМетаданных, "ПолноеИмяМетаданных", Истина);
			
			Если СтрокаИсточника <> Неопределено Тогда
				
				СтрокаДереваПриемника.Выгружать = СтрокаИсточника.Выгружать;
				СтрокаДереваПриемника.ВыгружатьПриНеобходимости = СтрокаИсточника.ВыгружатьПриНеобходимости;
				СтрокаДереваПриемника.НастройкиПостроителя = СтрокаИсточника.НастройкиПостроителя;
				СтрокаДереваПриемника.ИспользоватьОтбор = СтрокаИсточника.ИспользоватьОтбор;
				
			КонецЕсли;
			
			Если СтрокаДереваПриемника.Строки.Количество() > 0
				И СтрокаИсточника <> Неопределено Тогда
				
				ВосстановитьФлажкиДерева(СтрокаДереваПриемника, СтрокаИсточника);
				
			КонецЕсли;
			
		КонецЦикла;
		
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Процедура ПослеВосстановленияЗначений()
	
	Если СохраненныеНастройки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КопияДерева = СохраненныеНастройки.Получить();
	Если КопияДерева = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДеревоМетаданных.Строки.Количество() = 0 Тогда
	
		Инициализация();
		
	КонецЕсли;
	
	ВосстановитьФлажкиДерева(ДеревоМетаданных, КопияДерева);	
	
	НастроитьПостроитель();
	
КонецПроцедуры

Процедура ПриЗакрытии()
	
	ОкноИсполнения = Неопределено;
	ДеревоМетаданных_КопияФормы = Неопределено;
	ДеревоМетаданных = Неопределено;
	
КонецПроцедуры

Процедура ПолеИмениФайлаПриИзменении(Элемент)
	
	Файл = Новый Файл(ПолеИмениФайла);
	ИспользоватьФорматFastInfoSet = (Файл.Расширение = ".fi");
	
КонецПроцедуры

Функция ИмяОбъектаПоТипуДляЗапроса(Объект)
	
	МетаданныеОбъекта = Объект.Метаданные();
	ИмяМетаданных = МетаданныеОбъекта.Имя;
	
	ИмяДляЗапроса = "";
	
	Если Метаданные.Справочники.Содержит(МетаданныеОбъекта) Тогда
		ИмяДляЗапроса = "Справочник";
	ИначеЕсли Метаданные.Документы.Содержит(МетаданныеОбъекта) Тогда
		ИмяДляЗапроса = "Документ";
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(МетаданныеОбъекта) Тогда
		ИмяДляЗапроса = "ПланВидовХарактеристик";
	ИначеЕсли Метаданные.ПланыСчетов.Содержит(МетаданныеОбъекта) Тогда
		ИмяДляЗапроса = "ПланСчетов";
	ИначеЕсли Метаданные.ПланыВидовРасчета.Содержит(МетаданныеОбъекта) Тогда
		ИмяДляЗапроса = "ПланВидовРасчета";
	ИначеЕсли Метаданные.ПланыОбмена.Содержит(МетаданныеОбъекта) Тогда
		ИмяДляЗапроса = "ПланОбмена";
	ИначеЕсли Метаданные.БизнесПроцессы.Содержит(МетаданныеОбъекта) Тогда
		ИмяДляЗапроса = "БизнесПроцесс";
	ИначеЕсли Метаданные.Задачи.Содержит(МетаданныеОбъекта) Тогда
		ИмяДляЗапроса = "Задача";
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяДляЗапроса) Тогда
		Возврат "";
	Иначе
		Возврат ИмяДляЗапроса + "." + ИмяМетаданных;
	КонецЕсли;
	
КонецФункции

Процедура КоманднаяПанельДопОбъектыДляВыгрузкиДобавитьОбъектыДляВыгрузки(Кнопка)
	
	ФормаРедактированияОбъектов = ПолучитьФорму("ФормаВыбораОбъектовДляВыгрузки", ЭтаФорма);
				
	МассивТипов = Новый Массив();
	РезультатОткрытия = ФормаРедактированияОбъектов.ОткрытьМодально();
			
	Если РезультатОткрытия <> Истина Тогда
		Возврат;
	КонецЕсли;
			
	СписокРедактирования = ФормаРедактированияОбъектов.СписокРедактирования;
			
	// ничего не выбрали для регистрации
	Если СписокРедактирования.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементСписка Из СписокРедактирования Цикл
		
		Если НЕ ЗначениеЗаполнено(ЭлементСписка.Значение) Тогда
			Продолжить;
		КонецЕсли;			
		
		СтрокаТаблицы = ДополнительныеОбъектыДляВыгрузки.Добавить();	
		СтрокаТаблицы.Объект = ЭлементСписка.Значение;
		СтрокаТаблицы.ИмяОбъектаДляЗапроса = ИмяОбъектаПоТипуДляЗапроса(СтрокаТаблицы.Объект);
				
	КонецЦикла;
	
КонецПроцедуры

Процедура КоманднаяПанельДопОбъектыДляВыгрузкиОчистить(Кнопка)
	
	ДополнительныеОбъектыДляВыгрузки.Очистить();
	
КонецПроцедуры

Процедура ДополнительныеОбъектыДляВыгрузкиПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки = Неопределено 
		ИЛИ НЕ ЗначениеЗаполнено(ДанныеСтроки.Объект) Тогда
		Возврат;
	КонецЕсли;	
	
	ОформлениеСтроки.Ячейки.Объект.ИндексКартинки = 0;
	ОформлениеСтроки.Ячейки.Объект.ОтображатьКартинку = Истина;	
		
КонецПроцедуры

Процедура ДополнительныеОбъектыДляВыгрузкиОбъектПриИзменении(Элемент)
	
	ЭлементыФормы.ДополнительныеОбъектыДляВыгрузки.ТекущиеДанные.ИмяОбъектаДляЗапроса = ИмяОбъектаПоТипуДляЗапроса(ЭлементыФормы.ДополнительныеОбъектыДляВыгрузки.ТекущиеДанные.Объект);	
	
КонецПроцедуры

Процедура ДополнитьОтборДляДерева(СтрокиДерева, СтрокаОтбора)
	
	Для Каждого СтрокаДереваВыгрузки Из СтрокиДерева Цикл
		
		Если ОпределитьПоСтрокеДереваДоступенПостроитель(СтрокаДереваВыгрузки) Тогда
		 
			Попытка
				
				Построитель = ПодготовитьПостроительДляВыгрузки(СтрокаДереваВыгрузки);
				
				Отбор = Построитель.Отбор;
				
				СтрокаНовогоОтбора = Отбор.Найти(СтрокаОтбора.ПутьКДанным);
				
				Если СтрокаНовогоОтбора = Неопределено Тогда
					СтрокаНовогоОтбора = Отбор.Добавить(СтрокаОтбора.ПутьКДанным);
				КонецЕсли;
					
				ЗаполнитьЗначенияСвойств(СтрокаНовогоОтбора, СтрокаОтбора);
				
				СтрокаДереваВыгрузки.НастройкиПостроителя = Построитель.ПолучитьНастройки();
				СтрокаДереваВыгрузки.ИспользоватьОтбор    = ИСТИНА;
				
			Исключение
				
			КонецПопытки;		
				
		КонецЕсли;	
		
		Если СтрокаДереваВыгрузки.Строки.Количество() > 0 Тогда
			
			 ДополнитьОтборДляДерева(СтрокаДереваВыгрузки.Строки, СтрокаОтбора);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьОтборДляДерева(СтрокиДерева, СтрокаОтбора)
	
	Для Каждого СтрокаДереваВыгрузки Из СтрокиДерева Цикл
		
		Если ОпределитьПоСтрокеДереваДоступенПостроитель(СтрокаДереваВыгрузки) Тогда
		 
			Попытка
				
				Построитель = ПодготовитьПостроительДляВыгрузки(СтрокаДереваВыгрузки);
				
				Отбор = Построитель.Отбор;
				
				СтрокаНовогоОтбора = Отбор.Найти(СтрокаОтбора.ПутьКДанным);
				
				Если СтрокаНовогоОтбора <> Неопределено Тогда
					ИндексОтбора = Отбор.Индекс(СтрокаНовогоОтбора);
					Отбор.Удалить(ИндексОтбора);
					СтрокаДереваВыгрузки.НастройкиПостроителя = Построитель.ПолучитьНастройки();
					СтрокаДереваВыгрузки.ИспользоватьОтбор    = Отбор.Количество() > 0;
				КонецЕсли;				
				
			Исключение
				
			КонецПопытки;		
				
		КонецЕсли;	
		
		Если СтрокаДереваВыгрузки.Строки.Количество() > 0 Тогда
			
			 УдалитьОтборДляДерева(СтрокаДереваВыгрузки.Строки, СтрокаОтбора);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура КоманднаяПанельПостроительОтборКопироватьОтборВезде(Кнопка)
	
	СтрокаОтбора = ЭлементыФормы.ПостроительОтбор.ТекущиеДанные;
	Если СтрокаОтбора = Неопределено Тогда
		Предупреждение("Не выбрана строка отбра данных для копривания");
		Возврат;
	КонецЕсли;
	
	ДополнитьОтборДляДерева(ДеревоМетаданных.Строки, СтрокаОтбора);
		
	НастроитьПостроитель();
		
КонецПроцедуры

Процедура КоманднаяПанельПостроительОтборУдалитьОтбор(Кнопка)
	
	СтрокаОтбора = ЭлементыФормы.ПостроительОтбор.ТекущиеДанные;
	Если СтрокаОтбора = Неопределено Тогда
		Предупреждение("Не выбрана строка отбра данных для удаления");
		Возврат;
	КонецЕсли;
	
	ИндексОтбора = Построитель.Отбор.Индекс(СтрокаОтбора);
		
	УдалитьОтборДляДерева(ДеревоМетаданных.Строки, СтрокаОтбора);
	
	ОбновитьНастройкиПостроителяВТаблицеДляВыгрузки();	
		
КонецПроцедуры

Процедура ДополнительныеОбъектыДляВыгрузкиПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ОбработатьПеретаскиванияПростогоПараметра(ЗначениеПараметра, СтандартнаяОбработка)
	
	Попытка
		
		Если Не ЗначениеЗаполнено(ЗначениеПараметра) Тогда
			Возврат;
		КонецЕсли;
		
		ИмяДляЗапроса = ИмяОбъектаПоТипуДляЗапроса(ЗначениеПараметра);
		
		Если ПустаяСтрока(ИмяДляЗапроса) Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаДобавления = ДополнительныеОбъектыДляВыгрузки.Добавить();
		СтрокаДобавления.Объект = ЗначениеПараметра;
		СтрокаДобавления.ИмяОбъектаДляЗапроса = ИмяДляЗапроса;
		
		СтандартнаяОбработка = Ложь;
	Исключение
		СтандартнаяОбработка = Истина;
	КонецПопытки;
	
	
КонецПроцедуры

Процедура ДополнительныеОбъектыДляВыгрузкиПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	
Перем ТекущийФлагСтандартнойЗагрузки;

	ЗначениеПараметра = ПараметрыПеретаскивания.Значение;
		
	ТипЗначения = ТипЗнч(ЗначениеПараметра);
	
	Если ТипЗначения = Тип("Массив") Тогда
		
		НаличиеУдачнойЗагрузки = Ложь;
		Для Каждого ЗначениеПараметраИзМассива Из ЗначениеПараметра Цикл
			
			ОбработатьПеретаскиванияПростогоПараметра(ЗначениеПараметраИзМассива, ТекущийФлагСтандартнойЗагрузки);
			
			Если ТекущийФлагСтандартнойЗагрузки = Ложь Тогда
				НаличиеУдачнойЗагрузки = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		СтандартнаяОбработка = НЕ НаличиеУдачнойЗагрузки;
		
	Иначе
	
		ОбработатьПеретаскиванияПростогоПараметра(ЗначениеПараметра, СтандартнаяОбработка);
		
	КонецЕсли;		
			
КонецПроцедуры


ПолужирныйШрифт = Новый Шрифт(,,ИСТИНА,,,);
РежимВыгрузки = Истина;

ИндексыКартинокКлассов = Новый Структура;
ИндексыКартинокКлассов.Вставить("Справочники",              0);
ИндексыКартинокКлассов.Вставить("ПланыОбмена",              1);
ИндексыКартинокКлассов.Вставить("ПланыСчетов",              2);
ИндексыКартинокКлассов.Вставить("РеквизитыАдресации",       3);
ИндексыКартинокКлассов.Вставить("Константы",                4);
ИндексыКартинокКлассов.Вставить("РегистрыНакопления",       5);
ИндексыКартинокКлассов.Вставить("БизнесПроцессы",           6);
ИндексыКартинокКлассов.Вставить("Последовательности",       7);
ИндексыКартинокКлассов.Вставить("РегистрыСведений",         8);
ИндексыКартинокКлассов.Вставить("Перерасчеты",              9);
ИндексыКартинокКлассов.Вставить("Реквизиты",               10);
ИндексыКартинокКлассов.Вставить("ТабличныеЧасти",          11);
ИндексыКартинокКлассов.Вставить("Ресурсы",                 12);
ИндексыКартинокКлассов.Вставить("ПланыВидовРасчета",       13);
ИндексыКартинокКлассов.Вставить("Документы",               14);
ИндексыКартинокКлассов.Вставить("ПланыВидовХарактеристик", 15);
ИндексыКартинокКлассов.Вставить("Конфигурации",            16);
ИндексыКартинокКлассов.Вставить("Задачи",                  17);
ИндексыКартинокКлассов.Вставить("РегистрыБухгалтерии",     18);
ИндексыКартинокКлассов.Вставить("РегистрыРасчета",         19);
ИндексыКартинокКлассов.Вставить("Измерения",               20);
СоответствиеПоказыватьПриНеобходимости = Новый Соответствие;
