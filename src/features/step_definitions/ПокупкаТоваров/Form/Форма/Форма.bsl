//начало текста модуля

///////////////////////////////////////////////////
//Служебные функции и процедуры
///////////////////////////////////////////////////

&НаКлиенте
// контекст фреймворка Vanessa-Behavior
Перем Ванесса;
 
&НаКлиенте
// Структура, в которой хранится состояние сценария между выполнением шагов. Очищается перед выполнением каждого сценария.
Перем Контекст Экспорт;
 
&НаКлиенте
// Структура, в которой можно хранить служебные данные между запусками сценариев. Существует, пока открыта форма Vanessa-Behavior.
Перем КонтекстСохраняемый Экспорт;

&НаКлиенте
// Функция экспортирует список шагов, которые реализованы в данной внешней обработке.
Функция ПолучитьСписокТестов(КонтекстФреймворкаBDD) Экспорт
	Ванесса = КонтекстФреймворкаBDD;
	
	ВсеТесты = Новый Массив;

	//описание параметров
	//Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,Снипет,ИмяПроцедуры,ПредставлениеТеста,Транзакция,Параметр);

	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯПодгатавливаюПроцесЗакупки()","ЯПодгатавливаюПроцесЗакупки","Допустим я подгатавливаю процес закупки");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯСоздаюПокупку()","ЯСоздаюПокупку","Когда я создаю покупку");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЗаполняюШапкуДокумента()","ЯЗаполняюШапкуДокумента","И я заполняю шапку документа");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯВыбираюТовар()","ЯВыбираюТовар","И я выбираю товар");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯУстанавливаюЕгоКоличество()","ЯУстанавливаюЕгоКоличество","И я устанавливаю его количество");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯУказываюЕгоЦену()","ЯУказываюЕгоЦену","И я указываю его цену");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯПровожуДокумент()","ЯПровожуДокумент","И я провожу документ");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"РезультатПокупкиСчитаетсяКорректным()","РезультатПокупкиСчитаетсяКорректным","Тогда результат покупки считается корректным");

	Возврат ВсеТесты;
КонецФункции
	
&НаСервере
// Служебная функция.
Функция ПолучитьМакетСервер(ИмяМакета)
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	Возврат ОбъектСервер.ПолучитьМакет(ИмяМакета);
КонецФункции
	
&НаКлиенте
// Служебная функция для подключения библиотеки создания fixtures.
Функция ПолучитьМакетОбработки(ИмяМакета) Экспорт
	Возврат ПолучитьМакетСервер(ИмяМакета);
КонецФункции

&НаКлиенте 
Функция ПолучитьПутьКФайлуОтносительноКаталогаFeatures(ИмяФайлаСРасширением);

	ПутьКФайлу = "";
	СостояниеVanessaBehavior = Ванесса.ПолучитьСостояниеVanessaBehavior();
	
	ПутьКТекущемуFeatureФайлу = СостояниеVanessaBehavior.ТекущаяФича.ПолныйПуть;
	
	ПутьКФайлу = Лев(ПутьКТекущемуFeatureФайлу, СтрНайти(ПутьКТекущемуFeatureФайлу, "features")-1) + ИмяФайлаСРасширением;
	
	Возврат ПутьКФайлу;
КонецФункции	

&НаКлиенте
Процедура ЗагрузитьFixtureИзМакета(ИмяМакета)
	
	Ванесса.ЗапретитьВыполнениеШагов();
	
	НачальноеИмяФайла = ПолучитьПутьКФайлуОтносительноКаталогаFeatures("tools\ВыгрузкаЗагрузкаДанныхXML.epf");
	Адрес = "";
	НачатьПомещениеФайла(Новый ОписаниеОповещения("ЗагрузитьFixtureИзМакетаЗавершение", ЭтотОбъект, ИмяМакета), Адрес, НачальноеИмяФайла, Ложь);
	
КонецПроцедуры	

&НаКлиенте
Процедура ЗагрузитьFixtureИзМакетаЗавершение(УдалосьПоместитьФайл, Адрес, ВыбранноеИмяФайла, ИмяМакета) Экспорт
	
	 ЗагрузитьFixtureИзМакетаЗавершениеНаСервере(Адрес, ИмяМакета);
	 
	 Ванесса.ПродолжитьВыполнениеШагов();
КонецПроцедуры	

&НаСервере
Процедура ЗагрузитьFixtureИзМакетаЗавершениеНаСервере(Адрес, ИмяМакета)
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(Адрес);
	ДвоичныеДанные.Записать(ИмяВременногоФайла);
	
	ВнешняяОбработка = ВнешниеОбработки.Создать(ИмяВременногоФайла, Ложь);
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	
	Текст = РеквизитФормыВЗначение("Объект").ПолучитьМакет(ИмяМакета).ПолучитьТекст();
	
	ВременныйДокумент = Новый ТекстовыйДокумент;
	ВременныйДокумент.УстановитьТекст(Текст);
	ВременныйДокумент.Записать(ИмяВременногоФайла, КодировкаТекста.UTF8);
	
	ВнешняяОбработка.ВыполнитьЗагрузку(ИмяВременногоФайла);
КонецПроцедуры

///////////////////////////////////////////////////
//Работа со сценариями
///////////////////////////////////////////////////

&НаКлиенте
// Процедура выполняется перед началом каждого сценария
Процедура ПередНачаломСценария() Экспорт
	
КонецПроцедуры

&НаКлиенте
// Процедура выполняется перед окончанием каждого сценария
Процедура ПередОкончаниемСценария() Экспорт
	
КонецПроцедуры



///////////////////////////////////////////////////
//Реализация шагов
///////////////////////////////////////////////////

&НаКлиенте
//Допустим я подгатавливаю процес закупки
//@ЯПодгатавливаюПроцесЗакупки()
Процедура ЯПодгатавливаюПроцесЗакупки() Экспорт
	
	ЗагрузитьFixtureИзМакета("ЗакупаемыеТовары");
	ЗагрузитьFixtureИзМакета("ОсновнойПоставщик");
	
КонецПроцедуры

&НаКлиенте
//Когда я создаю покупку
//@ЯСоздаюПокупку()
Процедура ЯСоздаюПокупку() Экспорт
	//Ванесса.ПосмотретьЗначение(Парам01,Истина);
	ВызватьИсключение "Не реализовано.";
КонецПроцедуры

&НаКлиенте
//И я заполняю шапку документа
//@ЯЗаполняюШапкуДокумента()
Процедура ЯЗаполняюШапкуДокумента() Экспорт
	//Ванесса.ПосмотретьЗначение(Парам01,Истина);
	ВызватьИсключение "Не реализовано.";
КонецПроцедуры

&НаКлиенте
//И я выбираю товар
//@ЯВыбираюТовар()
Процедура ЯВыбираюТовар() Экспорт
	//Ванесса.ПосмотретьЗначение(Парам01,Истина);
	ВызватьИсключение "Не реализовано.";
КонецПроцедуры

&НаКлиенте
//И я устанавливаю его количество
//@ЯУстанавливаюЕгоКоличество()
Процедура ЯУстанавливаюЕгоКоличество() Экспорт
	//Ванесса.ПосмотретьЗначение(Парам01,Истина);
	ВызватьИсключение "Не реализовано.";
КонецПроцедуры

&НаКлиенте
//И я указываю его цену
//@ЯУказываюЕгоЦену()
Процедура ЯУказываюЕгоЦену() Экспорт
	//Ванесса.ПосмотретьЗначение(Парам01,Истина);
	ВызватьИсключение "Не реализовано.";
КонецПроцедуры

&НаКлиенте
//И я провожу документ
//@ЯПровожуДокумент()
Процедура ЯПровожуДокумент() Экспорт
	//Ванесса.ПосмотретьЗначение(Парам01,Истина);
	ВызватьИсключение "Не реализовано.";
КонецПроцедуры

&НаКлиенте
//Тогда результат покупки считается корректным
//@РезультатПокупкиСчитаетсяКорректным()
Процедура РезультатПокупкиСчитаетсяКорректным() Экспорт
	//Ванесса.ПосмотретьЗначение(Парам01,Истина);
	ВызватьИсключение "Не реализовано.";
КонецПроцедуры

//окончание текста модуля